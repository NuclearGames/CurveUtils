@page "/curveseditor"
@layout FullWindowLayout
@implements IDisposable
@implements ICurveEditorPage

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using CurvesWebEditor.Data.CanvasRendering
@using CurvesWebEditor.Data.CurvesEditor
@inject IJSRuntime JsRuntime;

<PageTitle>Curves Editor</PageTitle>

<div class="curveseditorsidebar">
    <NavLink class="nav-link" href="/">
        <span class="oi oi-list-rich" aria-hidden="true"></span> Выйти
    </NavLink>

    <hr />
    <label>Множители для осей</label>
    <label for="xAspect">Множитель X</label>
    <input id="xAspect" style="width:100%" @bind="_html!.AxisAspects.XString"/>
    <br />
    <label for="yAspect">Множитель Y</label>
    <input id="yAspect" style="width:100%" @bind="_html!.AxisAspects.YString"/>
    <br />
    <div><input type="checkbox" id="drawScaled" name="drawScaled" @bind="_html!.DrawScaledCurve.Value"><label for="drawScaled">Отображать отмасштабированную</label></div>

    <hr />

    <label>Редактирование выбранной вершины</label>
    <label for="xAspect">X</label>
    <input id="xAspect" style="width:100%" @bind="_html!.SelectedVertexValues.XString"/>
    <br />
    <label for="yAspect">Y</label>
    <input id="yAspect" style="width:100%" @bind="_html!.SelectedVertexValues.YString"/>
    <br />
    <label for="yAspect">Угол касательной [-85 : 85]</label>
    <input id="yAspect" style="width:100%" @bind="_html!.SelectedVertexValues.AngleString"/>
    <hr />

    <InputFile OnChange="@_html.UploadFile" />
    <br /><br />
    <button @onclick="_html.DownloadResults">Скачать</button>

    <hr />
    <p>
        Колесо - перемещение/масштабирование камеры.<br />
        Shift + ЛКМ - установить/удалить точку.
    </p>
</div>

<div id="canvasViewport" style="background-color:black; position: fixed; width: calc(100% - 200px); height: 100%; left:200px;">
    <BECanvas Width="600" Height="400" @ref="_canvasReference"></BECanvas>
</div>


@code {
    private const int LEFT_PANEL_WIDTH = 200;
    private CurvesEditorHtml? _html; 
    private BECanvasComponent? _canvasReference;
    private Canvas2DContext? _canvasContext;
    private float _time = 0f;
    private int _viewportWidth, _viewportHeight;
    private bool _disposed;

    public CanvasRender? Render { get; private set; }
    private bool HandleJsEvents => !_disposed && Render != null;

    protected override void OnInitialized() {
        base.OnInitialized();
        _html = new CurvesEditorHtml(this);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) {
            _canvasContext = await _canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>("canvasInit", DotNetObjectReference.Create(this));
            Render = new CanvasRender(_html!, _canvasContext, _viewportWidth, _viewportHeight);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public ValueTask InvokeJSVoid(string name, params object[] args) {
        return JsRuntime.InvokeVoidAsync(name, args);
    }

    public void Refresh() {
        StateHasChanged();
    }

    [JSInvokable]
    public void CanvasResize(int width, int height) {
        if (_disposed) {
            return;
        }

        _viewportWidth = width;
        _viewportHeight = height;

        if (Render != null) {
            Render.Resize(width, height);
        }
    }

    [JSInvokable]
    public async ValueTask CanvasRender(float time) {
        if (!HandleJsEvents) {
            return;
        }
        float deltaTime = time - _time;
        _time = time;
        await Render!.Render(deltaTime);
    }

    [JSInvokable]
    public void CanvasPointerMove(int x, int y) {
        if (!HandleJsEvents) {
            return;
        }
        Render!.OnPointerMove(x - LEFT_PANEL_WIDTH, y);
    }

    [JSInvokable]
    public void CanvasPointerDown(int button, bool shift, bool alt) {
        if (!HandleJsEvents) {
            return;
        }
        Render!.OnPointerDown(button, shift, alt);
    }

    [JSInvokable]
    public void CanvasPointerUp(int button, bool shift, bool alt) {
        if (!HandleJsEvents) {
            return;
        }
        Render!.OnPointerUp(button, shift, alt);
    }

    [JSInvokable]
    public void CanvasWheel(float deltaY, bool shift, bool alt) {
        if (!HandleJsEvents) {
            return;
        }
        Render!.OnWheel(deltaY, shift, alt);
    }

    public void Dispose(){
        JsRuntime.InvokeAsync<object>("canvasDispose", DotNetObjectReference.Create(this));
        _canvasContext = null;
        Render = null;
        _disposed = true;
    }
}
