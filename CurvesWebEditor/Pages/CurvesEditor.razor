@page "/curveseditor"
@layout FullWindowLayout

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime;

<PageTitle>Curves Editor</PageTitle>

<div id="canvasHolder" style="background-color:black; position: fixed; width: 100%; height: 80%;">
    <BECanvas Width="600" Height="400" @ref="_canvasReference"></BECanvas>
</div>

<div style="background-color:orange; position: fixed; width: 100%; height: 20%; top:80%;">
    <p role="status">Time: @_time</p>
    <button class="btn btn-primary" @onclick="IncrementCount">@_currentCount</button>
</div>


@code {
    private int _currentCount = 0;
    private float _time = 0f;
    private BECanvasComponent? _canvasReference;
    private Canvas2DContext? _canvasContext;
    private float _width, _height;

    protected async override Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender){
            _canvasContext = await _canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>("canvasInit", DotNetObjectReference.Create(this));
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    [JSInvokable]
    public void CanvasResize(float width, float height) {
        _width = width;
        _height = height;
    }

    [JSInvokable]
    public async ValueTask CanvasRender(float time) {
        float deltaTime = time - _time;
        _time = time;

        await _canvasContext!.BeginBatchAsync();
        await _canvasContext!.ClearRectAsync(0, 0, _width, _height);

        await _canvasContext.SetFillStyleAsync("#ffe6e6");
        await _canvasContext.FillRectAsync(0, 0, _width, _height);

        await _canvasContext.SetStrokeStyleAsync("#1306c7");

        await _canvasContext.BeginPathAsync();
        await _canvasContext.ArcAsync(200, 200, 100, 0, 2 * Math.PI, false);
        await _canvasContext.SetFillStyleAsync("#000000");
        await _canvasContext.FillAsync();
        await _canvasContext.StrokeAsync();

        await _canvasContext.SetLineWidthAsync(15);
        await _canvasContext.SetLineCapAsync(LineCap.Round);

        await _canvasContext.BeginPathAsync();
        await _canvasContext.LineToAsync(300, 500);
        await _canvasContext.LineToAsync(_width, _height);
        await _canvasContext.SetFillStyleAsync("#c70606");
        await _canvasContext.FillAsync();
        await _canvasContext.StrokeAsync();

        /*await _canvasContext.SetLineWidthAsync(5f);
        await _canvasContext.LineToAsync(100, 100);
        await _canvasContext.LineToAsync(300, 100);
        await _canvasContext.SetFillStyleAsync("#000000");
        await _canvasContext.FillAsync();*/

        await _canvasContext!.EndBatchAsync();
    }

    private void IncrementCount() {
        _currentCount++;
    }
}
